/*********************************************************************************************

Name : Pradip S Karmakar
Class : M.C.A 2
Roll_No : 10
Subject : RDBMS

**********************************************************************************************/

===============================================================================================

                                        TOPIC : Triggers

===============================================================================================

1. Q(example 11.2) : This example is divided in three categories : Insert, Update and Delete

    a.  Insert : Write a trigger which updates the sale value if customer already 
        exists else create new entry of customer.
    b.  Update : If the customer is updating , WAT to update the sales value by
        incrementing the Sale_vale field.
    c.  Delete : If the customer is deleting , WAT to update the sales value by
        decrementing the Sale_vale field.

===============================================================================================
                                            INSERT
===============================================================================================

MariaDB [test]> DELIMITER //
MariaDB [test]> CREATE TRIGGER sales_bi_trg BEFORE INSERT ON sales
    -> FOR EACH ROW
    -> BEGIN
    -> DECLARE row_count INTEGER;
    ->     SELECT COUNT(*)
    ->     INTO row_count
    ->     FROM customer_sales_total
    ->     WHERE cust_id=NEW.cust_id;
    ->
    ->     IF row_count > 0 THEN
    ->         UPDATE customer_sales_total
    ->         SET sale_value=sale_value+NEW.sale_value
    ->         WHERE cust_id=NEW.cust_id;
    ->     ELSE
    ->         INSERT INTO customer_sales_total
    ->         (cust_id,sale_value)
    ->         VALUES(NEW.cust_id,NEW.sale_value);
    ->     END IF;
    -> END//
Query OK, 0 rows affected (0.021 sec)

MariaDB [test]> DELIMITER ;


MariaDB [test]> insert into sales(cust_id,product_name,sale_value) values(1,'printer',3500);
Query OK, 1 row affected (0.016 sec)


MariaDB [test]> select * from customer_sales_total;
+---------+------------+
| cust_id | sale_value |
+---------+------------+
|       1 |    3500.00 |
+---------+------------+
1 row in set (0.000 sec)


MariaDB [test]> select * from sales;
+----------+---------+--------------+------------+
| sales_id | cust_id | product_name | sale_value |
+----------+---------+--------------+------------+
|        1 |       1 | printer      |    3500.00 |
+----------+---------+--------------+------------+
1 row in set (0.000 sec)


MariaDB [test]> insert into sales(cust_id,product_name,sale_value) values(1,'Page Bundle',400);
Query OK, 1 row affected (0.008 sec)


MariaDB [test]> select * from customer_sales_total;
+---------+------------+
| cust_id | sale_value |
+---------+------------+
|       1 |    3900.00 |
+---------+------------+
1 row in set (0.000 sec)


MariaDB [test]> select * from sales;
+----------+---------+--------------+------------+
| sales_id | cust_id | product_name | sale_value |
+----------+---------+--------------+------------+
|        1 |       1 | printer      |    3500.00 |
|        2 |       1 | Page Bundle  |     400.00 |
+----------+---------+--------------+------------+
2 rows in set (0.000 sec)

MariaDB [test]> insert into sales(cust_id,product_name,sale_value) values(2,'mouse',870);
Query OK, 1 row affected (0.007 sec)

MariaDB [test]> select * from customer_sales_total;
+---------+------------+
| cust_id | sale_value |
+---------+------------+
|       1 |    3900.00 |
|       2 |     870.00 |
+---------+------------+
2 rows in set (0.000 sec)

MariaDB [test]> select * from sales;
+----------+---------+--------------+------------+
| sales_id | cust_id | product_name | sale_value |
+----------+---------+--------------+------------+
|        1 |       1 | printer      |    3500.00 |
|        2 |       1 | Page Bundle  |     400.00 |
|        3 |       2 | mouse        |     870.00 |
+----------+---------+--------------+------------+
3 rows in set (0.000 sec)

===============================================================================================
                                            UPDATE
===============================================================================================

MariaDB [test]> DELIMITER //
MariaDB [test]> CREATE TRIGGER sales_bu_trg BEFORE UPDATE ON sales FOR EACH ROW
    -> BEGIN
    ->     UPDATE customer_sales_total
    ->     SET sale_value=sale_value+(NEW.sale_value-OLD.sale_value)
    ->     WHERE cust_id=NEW.cust_id;
    -> END //
Query OK, 0 rows affected (0.019 sec)

MariaDB [test]> DELIMITER ;

MariaDB [test]> update sales set sale_value = 550 where sales_id = 2;
Query OK, 1 row affected (0.007 sec)
Rows matched: 1  Changed: 1  Warnings: 0

MariaDB [test]> select * from customer_sales_total;
+---------+------------+
| cust_id | sale_value |
+---------+------------+
|       1 |    4050.00 |
|       2 |     870.00 |
+---------+------------+
2 row in set (0.000 sec)

MariaDB [test]> select * from sales;
+----------+---------+--------------+------------+
| sales_id | cust_id | product_name | sale_value |
+----------+---------+--------------+------------+
|        1 |       1 | printer      |    3500.00 |
|        2 |       1 | Page Bundle  |     550.00 |
|        3 |       2 | mouse        |     870.00 |
+----------+---------+--------------+------------+
3 rows in set (0.000 sec)


===============================================================================================
                                            DELETE
===============================================================================================

MariaDB [test]> DELIMITER //
MariaDB [test]> CREATE  TRIGGER sales_bd_trg BEFORE DELETE ON sales FOR EACH ROW
    -> BEGIN
    ->     UPDATE customer_sales_total
    ->     SET sale_value=sale_value-OLD.sale_value
    ->     WHERE cust_id=OLD.cust_id;
    -> END //
Query OK, 0 rows affected (0.022 sec)

MariaDB [test]> DELIMITER ;

MariaDB [test]> delete from sales where sales_id = 3;
Query OK, 1 row affected (0.008 sec)

MariaDB [test]> select * from sales;
+----------+---------+--------------+------------+
| sales_id | cust_id | product_name | sale_value |
+----------+---------+--------------+------------+
|        1 |       1 | printer      |    3500.00 |
|        2 |       1 | Page Bundle  |     550.00 |
+----------+---------+--------------+------------+
2 rows in set (0.000 sec)

MariaDB [test]> select * from customer_sales_total;
+---------+------------+
| cust_id | sale_value |
+---------+------------+
|       1 |    4050.00 |
|       2 |       0.00 |
+---------+------------+


***********************************************************************************************

===============================================================================================

2. Q(example 11.4) Wirte a program to create trigger signal to restrict entering negative value
   in balance.

===============================================================================================


MariaDB [test]> DELIMITER //
MariaDB [test]> CREATE TRIGGER account_balance_bu BEFORE UPDATE ON account_balance
    -> FOR EACH ROW
    -> BEGIN
    ->     IF (NEW.balance < 0) THEN
    ->         SIGNAL SQLSTATE '80000'
    ->         SET MESSAGE_TEXT='Account balance cannot be less than 0';
    ->     END IF;
    -> END //
Query OK, 0 rows affected (0.028 sec)

MariaDB [test]> DELIMITER ;


MariaDB [test]> insert into account_balance(balance) values(10000)
    -> ,(23000),
    -> (45000);
Query OK, 3 rows affected (0.005 sec)
Records: 3  Duplicates: 0  Warnings: 0


MariaDB [test]> select * from account_balance;
+--------+----------+
| acc_id | balance  |
+--------+----------+
|      1 | 10000.00 |
|      2 | 23000.00 |
|      3 | 45000.00 |
+--------+----------+
3 rows in set (0.000 sec)


MariaDB [test]> update account_balance set balance = -2000 where acc_id = 2;
ERROR 1644 (80000): Account balance cannot be less than 0



***********************************************************************************************

===============================================================================================

3. Q(example 11.5) Write a trigger to perform data validation using select statement.

===============================================================================================

MariaDB [test]> DELIMITER //
MariaDB [test]> CREATE TRIGGER account_balance_bu  BEFORE UPDATE ON account_balance FOR EACH ROW
    -> BEGIN
    ->     DECLARE dummy INT;
    ->     IF NEW.balance<0 THEN
    ->         SELECT `Account balance cannot be less than 0` INTO dummy
    ->         FROM account_balance WHERE acc_id=NEW.acc_id;
    ->     END IF;
    -> END //
Query OK, 0 rows affected (0.024 sec)

MariaDB [test]>
MariaDB [test]> DELIMITER ;
MariaDB [test]> update account_balance set balance = -6000 where acc_id = 3;
ERROR 1054 (42S22): Unknown column 'Account balance cannot be less than 0' in 'field list'


***********************************************************************************************

===============================================================================================

4. Q(figure 2.17) :write a example to create a sales table whichprovides free shipping on orders
   above 500

===============================================================================================

MariaDB [test]> DELIMITER //
MariaDB [test]> CREATE TRIGGER sales_bi_trg1 BEFORE INSERT ON sales1
    -> FOR EACH ROW
    -> BEGIN
    ->     IF NEW.sale_value>500 THEN
    ->         SET NEW.free_shipping='Y';
    ->     ELSE
    ->         SET NEW.free_shipping='N';
    ->     END IF;
    ->         IF NEW.sale_value>1000 THEN
    ->             SET NEW.discount=NEW.sale_value*0.5;
    ->         ELSE
    ->             SET NEW.discount=0;
    ->     END IF;
    -> END //
Query OK, 0 rows affected (0.025 sec)

MariaDB [test]> DELIMITER ;

MariaDB [test]> INSERT INTO sales1(customer_id,sale_value,free_shipping,discount) VALUES(201,20000,'N',0);
Query OK, 1 row affected (0.008 sec)

MariaDB [test]> select * from sales1;
+----------+-------------+------------+---------------+----------+
| sales_id | customer_id | sale_value | free_shipping | discount |
+----------+-------------+------------+---------------+----------+
|        1 |         201 |      20000 | Y             |    10000 |
+----------+-------------+------------+---------------+----------+
1 row in set (0.000 sec)

===============================================================================================

                                       TOPIC : Transaction

===============================================================================================

5. Q(example 8.1) : Create a procedure to commence a transaction using auto commit.

===============================================================================================

MariaDB [test]> DELIMITER //
MariaDB [test]> CREATE PROCEDURE transfer_funds (from_account int, to_account int,transfer_amount decimal(10,2))
    -> BEGIN
    ->     SET autocommit=0;
    ->     UPDATE ACCOUNTS SET amount_balance = amount_balance - transfer_amount WHERE acc_id=from_account;
    ->     UPDATE ACCOUNTS SET amount_balance = amount_balance + transfer_amount WHERE acc_id=to_account;
    ->     COMMIT;
    -> END //
Query OK, 0 rows affected (1.759 sec)

MariaDB [test]> DELIMITER ;
MariaDB [test]> insert into accounts(branch_name,amount_balance) values('Navsari',43900),('Surat',23090),('Ahmedabad',60897);
Query OK, 3 rows affected (0.008 sec)
Records: 3  Duplicates: 0  Warnings: 0

MariaDB [test]> select * from accounts;
+--------+-------------+----------------+
| acc_id | branch_name | amount_balance |
+--------+-------------+----------------+
|      1 | Navsari     |       43900.00 |
|      2 | Surat       |       23090.00 |
|      3 | Ahmedabad   |       60897.00 |
+--------+-------------+----------------+
3 rows in set (0.000 sec)


MariaDB [test]> call transfer_funds(3,1,4500);
Query OK, 2 rows affected (0.007 sec)


MariaDB [test]> select * from accounts;
+--------+-------------+----------------+
| acc_id | branch_name | amount_balance |
+--------+-------------+----------------+
|      1 | Navsari     |       48400.00 |
|      2 | Surat       |       23090.00 |
|      3 | Ahmedabad   |       56397.00 |
+--------+-------------+----------------+
3 rows in set (0.000 sec)


===============================================================================================

6. Q(example 8.2) : Create a procedure to commence a transaction using start transaction.

===============================================================================================


MariaDB [test]> DELIMITER //
MariaDB [test]> CREATE PROCEDURE trans_tfer_funds(from_account int, to_account int,tfer_amount decimal(10,2))
    -> BEGIN
    ->     START TRANSACTION;
    ->         UPDATE ACCOUNTS SET amount_balance =amount_balance - tfer_amount WHERE acc_id=from_account;
    ->         UPDATE ACCOUNTS SET amount_balance =amount_balance + tfer_amount WHERE acc_id=to_account;
    ->     COMMIT;
    -> END //
Query OK, 0 rows affected (0.021 sec)

MariaDB [test]> DELIMITER ;
MariaDB [test]> select * from accounts;
+--------+-------------+----------------+
| acc_id | branch_name | amount_balance |
+--------+-------------+----------------+
|      1 | Navsari     |       48400.00 |
|      2 | Surat       |       23090.00 |
|      3 | Ahmedabad   |       56397.00 |
+--------+-------------+----------------+
3 rows in set (0.000 sec)


MariaDB [test]> call transfer_funds(2,3,3000);
Query OK, 2 rows affected (0.007 sec)


MariaDB [test]> select * from accounts;
+--------+-------------+----------------+
| acc_id | branch_name | amount_balance |
+--------+-------------+----------------+
|      1 | Navsari     |       48400.00 |
|      2 | Surat       |       20090.00 |
|      3 | Ahmedabad   |       59397.00 |
+--------+-------------+----------------+
3 rows in set (0.000 sec)


===============================================================================================

7. Q(example 8.3) : create a procedure which displays use of Savepoint with a transaction

===============================================================================================
DELIMITER //
create procedure creating_table()
BEGIN
    create table location(location varchar(20),address1 varchar(20),address2 varchar(20),zipcode int);
    create table AUDIT_LOG (audit_message varchar(20));
    create table departments(department_name varchar(20),location varchar(20),manager_id int);
END //

MariaDB [test]> CREATE PROCEDURE savepoint_example(in_department_name VARCHAR(30),in_location VARCHAR(30),in_address1 VARCHAR(30),in_address2 VARCHAR(30),in_zipcode VARCHAR(10), in_manager_id INT)
    ->     BEGIN
    ->     DECLARE location_exists INT DEFAULT 0;
    ->     DECLARE duplicate_dept INT DEFAULT 0;
    ->     START TRANSACTION;
    ->         SELECT COUNT(*) INTO location_exists FROM location WHERE location=in_location;
    ->         IF location_exists=0 THEN
    ->             INSERT INTO AUDIT_LOG (audit_message) VALUES (CONCAT('Creating new location ',in_location));
    ->             INSERT INTO location (location,address1,address2,zipcode) VALUES (in_location,in_address1,in_address2,in_zipcode);
    ->         ELSE
    ->             UPDATE location set address1=in_address1, address2=in_address2, zipcode=in_zipcode WHERE location=in_location;
    ->         END IF;
    ->     SAVEPOINT savepoint_location_exists;
    ->     BEGIN
    ->     DECLARE DUPLICATE_KEY CONDITION FOR 1062;
    ->     DECLARE CONTINUE HANDLER FOR DUPLICATE_KEY /*Duplicate key value*/
    ->     BEGIN
    ->     SET duplicate_dept=1;
    ->     ROLLBACK TO SAVEPOINT savepoint_location_exists;
    ->     END;
    ->     INSERT INTO AUDIT_LOG (audit_message) VALUES (CONCAT('Creating new department',in_department_name));
    ->     INSERT INTO DEPARTMENTS (department_name,location,manager_id) VALUES (in_department_name,in_location, in_manager_id);
    ->         IF duplicate_dept=1 THEN
    ->             UPDATE departments SET location=in_location,manager_id=in_manager_id WHERE department_name=in_department_name;
    ->         END IF;
    ->         END;
    ->     COMMIT;
    -> END //
Query OK, 0 rows affected (0.022 sec)

MariaDB [test]> DELIMITER ;

MariaDB [test]>  CALL savepoint_example('Designing','Navsari','Grid road','Bhagvati Sankul Society',396445,1);
Query OK, 5 rows affected (0.007 sec)

MariaDB [test]> select * from location;
+----------+-----------+----------------------+---------+
| location | address1  | address2             | zipcode |
+----------+-----------+----------------------+---------+
| Navsari  | Grid road | Bhagvati Sankul Soci |  396445 |
+----------+-----------+----------------------+---------+
1 row in set (0.000 sec)

MariaDB [test]> select * from AUDIT_LOG;
+-----------------------------------+
| audit_message                     |
+-----------------------------------+
| Creating new location Navsari     |
| Creating new department Designing |
+-----------------------------------+
2 rows in set (0.002 sec)

MariaDB [test]> select * from departments;
+-----------------+----------+------------+
| department_name | location | manager_id |
+-----------------+----------+------------+
| Designing       | Navsari  |          1 |
+-----------------+----------+------------+
1 row in set (0.000 sec)


===============================================================================================

                                 TOPIC : Triggers (DO IT YOURSELF)

===============================================================================================

1. Write a Trigger that stores the old data table of student table in student_backup while 
   updating the student table.
   Student_backup (Stud_ID, Stud_name, Address, Contact_no, Branch, Operation_date) 
   Student (Stud_ID, Stud_name, Address, Contact_no, Branch)

===============================================================================================

MariaDB [test]> DELIMITER //
MariaDB [test]> CREATE PROCEDURE creating_table1()
    -> BEGIN
    ->     CREATE TABLE Student(Stud_ID INT PRIMARY KEY, Stud_name VARCHAR(20), Address VARCHAR(30), Contact_no INT(11), Branch VARCHAR(60));
    ->     CREATE TABLE Student_backup(Stud_ID INT PRIMARY KEY, Stud_name VARCHAR(20), Address VARCHAR(30), Contact_no INT(11), Branch VARCHAR(60),Operation_date date);
    -> END //
Query OK, 0 rows affected (0.009 sec)


MariaDB [test]> call creating_table1() //
Query OK, 0 rows affected (0.291 sec)


MariaDB [test]> CREATE TRIGGER stud_backup BEFORE UPDATE ON student FOR EACH ROW
    -> BEGIN
    ->     INSERT INTO Student_backup values(OLD.Stud_ID,OLD.Stud_name,OLD.Address,OLD.Contact_no,OLD.Branch,curdate());
    -> END //
Query OK, 0 rows affected (0.028 sec)


MariaDB [test]> CREATE PROCEDURE insert_table1()
    -> BEGIN
    ->     insert into Student(Stud_name,Address,Contact_no,Branch) values('Pradip','Navsari',8882228888,'Kabilpore'),
    ->     ('Ajinkya','Kutch',8881118888,'Gandhidham'),
    ->     ('Milind','Ahmedabad',8268228888,'Kalupur'),
    ->     ('Lakshya','Kutch',9888221358,'Gandhidham'),
    ->     ('Nirav','Kutch',8892220088,'Gandhidham');
    -> END //
Query OK, 0 rows affected (0.020 sec)

MariaDB [test]> DELIMITER ;
MariaDB [test]> call insert_table1();
Query OK, 5 rows affected, 5 warnings (0.007 sec)

MariaDB [test]> UPDATE Student SET Contact_no = 8238118848 WHERE Stud_ID=1;
Query OK, 0 rows affected, 1 warning (0.010 sec)
Rows matched: 1  Changed: 0  Warnings: 1


MariaDB [test]> select * from students;
ERROR 1146 (42S02): Table 'test.students' doesn't exist
MariaDB [test]> select * from student;
+---------+-----------+-----------+------------+------------+
| Stud_ID | Stud_name | Address   | Contact_no | Branch     |
+---------+-----------+-----------+------------+------------+
|       1 | Pradip    | Navsari   | 2147483647 | Kabilpore  |
|       2 | Ajinkya   | Kutch     | 2147483647 | Gandhidham |
|       3 | Milind    | Ahmedabad | 2147483647 | Kalupur    |
|       4 | Lakshya   | Kutch     | 2147483647 | Gandhidham |
|       5 | Nirav     | Kutch     | 2147483647 | Gandhidham |
+---------+-----------+-----------+------------+------------+
5 rows in set (0.000 sec)


MariaDB [test]> select * from student_backup;
+---------+-----------+---------+------------+-----------+----------------+
| Stud_ID | Stud_name | Address | Contact_no | Branch    | Operation_date |
+---------+-----------+---------+------------+-----------+----------------+
|       1 | Pradip    | Navsari | 2147483647 | Kabilpore | 2020-05-06     |
+---------+-----------+---------+------------+-----------+----------------+
1 row in set (0.000 sec)


===============================================================================================

2. Write a trigger, that ensures the empno of emp table is in a format ‘E00001’ (empno must start
   with ‘E’ and must be 6 characters long). If not, than complete empno with this format before
   inserting into the employee table.

===============================================================================================

MariaDB [test]> DELIMITER //
MariaDB [test]> CREATE TRIGGER emp_format BEFORE INSERT ON emp_tr1 FOR EACH ROW
    -> BEGIN
    ->     DECLARE I INT DEFAULT 1;
    ->     DECLARE CH INT;
    ->     DECLARE LEN INT;
    ->     DECLARE FLAG INT DEFAULT 0;
    ->     DECLARE EMP_ID VARCHAR(10);
    ->     SET EMP_ID=NEW.empid;
    ->     SET LEN=LENGTH(NEW.empid);
    ->     IF (LEN<6) THEN
    ->         SIGNAL SQLSTATE '80000'
    ->         SET MESSAGE_TEXT='EMPLOYEE ID MUST BE 6 CHARACTER LONG';
    ->     ELSEIF (LEN>6) THEN
    ->         SIGNAL SQLSTATE '80001'
    ->         SET MESSAGE_TEXT='EMPLOYEE ID MUST BE 6 CHARACTER LONG';
    ->     ELSE
    ->         SET CH=ASCII(SUBSTR(EMP_ID,I,1));
    ->         IF (CH=69) THEN
    ->             SET I=I+1;
    ->             MYLOOP : WHILE (I<LEN) DO
    ->                 SET CH=ASCII(SUBSTR(EMP_ID,I,1));
    ->                 IF (CH>=48 AND CH<=57) THEN
    ->                     SET I=I+1;
    ->                 ELSE
    ->                     SET FLAG=1;
    ->                     LEAVE MYLOOP;
    ->                 END IF;
    ->             END WHILE;
    ->         ELSE
    ->             SIGNAL SQLSTATE '80002'
    ->             SET MESSAGE_TEXT='EMPLOYEE ID MUST BE LIKE E00001';
    ->         END IF ;
    ->     END IF;
    ->     IF (FLAG=1) THEN
    ->         SIGNAL SQLSTATE '80003'
    ->         SET MESSAGE_TEXT='EMPLOYEE ID MUST BE LIKE E00001';
    ->     END IF;
    -> END //
Query OK, 0 rows affected (0.032 sec)

MariaDB [test]> DELIMITER ;

MariaDB [test]> insert into emp_tr1 values(1,'pradip');
ERROR 1644 (80000): EMPLOYEE ID MUST BE 6 CHARACTER LONG

MariaDB [test]> insert into emp_tr1 values(123456,'pradip');
ERROR 1644 (80002): EMPLOYEE ID MUST BE LIKE E00001

MariaDB [test]> insert into emp_tr1 values('E00001','pradip');
Query OK, 1 row affected (0.007 sec)

MariaDB [test]> select * from emp_tr1;
+--------+--------+
| empid  | name   |
+--------+--------+
| E00001 | pradip |
+--------+--------+
1 row in set (0.000 sec)


===============================================================================================

3. Write a trigger which checks the age of employee while inserting the record in emp table. 
   If it is negative than generate the error and display proper message.

===============================================================================================

MariaDB [test]> DELIMITER //
MariaDB [test]>
MariaDB [test]> CREATE TRIGGER check_age BEFORE INSERT ON emp_tr1
    -> FOR EACH ROW
    -> BEGIN
    -> DECLARE AGE INT;
    ->     SET AGE=YEAR(CURDATE())-YEAR(NEW.birth_day);
    ->     IF AGE<0 THEN
    ->         SIGNAL SQLSTATE '80005'
    ->         SET MESSAGE_TEXT='Please Enter Valid BirthDay';
    ->     END IF;
    -> END //
Query OK, 0 rows affected (0.020 sec)

MariaDB [test]> DELIMITER ;

MariaDB [test]> insert into emp_tr1 values('E00002','Nirav','2021-06-23');
ERROR 1644 (80005): Please Enter Valid BirthDay

MariaDB [test]> insert into emp_tr1 values('E00002','Nirav','1999-06-23');
Query OK, 1 row affected (0.007 sec)

MariaDB [test]> select * from emp_tr1;
+--------+--------+------------+
| empid  | name   | birth_day  |
+--------+--------+------------+
| E00001 | pradip | 1998-04-25 |
| E00002 | Nirav  | 1999-06-23 |
+--------+--------+------------+
2 rows in set (0.000 sec)


===============================================================================================

4. Write a trigger which converts the employee name in upper case if it is inserted in any other
   case. Change should be done before the insertion only.

===============================================================================================

MariaDB [test]> DELIMITER //
MariaDB [test]> CREATE TRIGGER uppercase_name BEFORE INSERT ON emp_tr1 FOR EACH ROW
    ->     BEGIN
    ->     DECLARE I INT DEFAULT 1;
    ->     DECLARE NAME VARCHAR(20) default ' ';
    ->     DECLARE STRING VARCHAR(20) DEFAULT " ";
    ->     DECLARE RES VARCHAR(2) DEFAULT "";
    ->     DECLARE CH INT;
    ->     DECLARE LEN INT;
    ->     SET NAME=NEW.name;
    ->     SET LEN=LENGTH(NAME);
    ->     WHILE (I<=LEN) do
    ->         SET CH=ASCII(SUBSTR(NAME,I,1));
    ->         IF (CH>=97 AND CH<=122) THEN
    ->             SET CH=CH-32;
    ->         END IF;
    ->             SET RES=CHAR(CH);
    ->             SET STRING=CONCAT(STRING,RES);
    ->             SET I=I+1;
    ->     END WHILE;
    ->     set new.name=string;
    -> END //
Query OK, 0 rows affected (0.020 sec)

MariaDB [test]> DELIMITER ;
MariaDB [test]> select * from emp_tr1;
+--------+--------+------------+
| empid  | name   | birth_day  |
+--------+--------+------------+
| E00001 | pradip | 1998-04-25 |
| E00002 | Nirav  | 1999-06-23 |
+--------+--------+------------+
2 rows in set (0.001 sec)

MariaDB [test]> insert into emp_tr1 values('E00002','ajinkya','1999-01-26');
Query OK, 1 row affected (0.011 sec)

MariaDB [test]> select * from emp_tr1;
+--------+----------+------------+
| empid  | name     | birth_day  |
+--------+----------+------------+
| E00001 | pradip   | 1998-04-25 |
| E00002 | Nirav    | 1999-06-23 |
| E00002 |  AJINKYA | 1999-01-26 |
+--------+----------+------------+
3 rows in set (0.000 sec)


===============================================================================================

5. WAT that stores the data of emp table in emp_backup table for every delete operation and
  store the old data for every update operation.

  EMP(Empno, Empname, salary);
  Emp_Backup(Empno,Empname,Date_of_operation,Type_of_operation (i.e.update or delete));

===============================================================================================

MariaDB [test]> DELIMITER //

MariaDB [test]> CREATE TRIGGER emp_bu BEFORE UPDATE ON EMP1  FOR EACH ROW
    -> BEGIN
    ->     INSERT INTO Emp_Backup(Empno,Empname,Date_of_operation,Type_of_operation) values (NEW.Empno,NEW.Empname,CURDATE(),'Update');
    -> END //
Query OK, 0 rows affected (0.020 sec)

MariaDB [test]> CREATE TRIGGER emp_bd BEFORE DELETE ON EMP1  FOR EACH ROW
    -> BEGIN
    ->     INSERT INTO Emp_Backup(Empno,Empname,Date_of_operation,Type_of_operation) values (old.Empno,old.Empname,CURDATE(),'Delete');
    -> END //
Query OK, 0 rows affected (0.022 sec)

MariaDB [test]> DELIMITER ;
MariaDB [test]> insert into EMP1 values(1,'Pradip',50000);
Query OK, 1 row affected (0.008 sec)

MariaDB [test]> select * from EMP1;
+-------+---------+--------+
| Empno | Empname | salary |
+-------+---------+--------+
|     1 | Pradip  |  50000 |
+-------+---------+--------+
1 row in set (0.002 sec)

MariaDB [test]> update EMP1 set salary = 60000 where Empno = 1;
Query OK, 1 row affected (0.008 sec)
Rows matched: 1  Changed: 1  Warnings: 0

MariaDB [test]> select * from EMP1;
+-------+---------+--------+
| Empno | Empname | salary |
+-------+---------+--------+
|     1 | Pradip  |  60000 |
+-------+---------+--------+
1 row in set (0.000 sec)

MariaDB [test]> delete from EMP1 where Empno = 1;
Query OK, 1 row affected (0.007 sec)

MariaDB [test]> select * from emp_backup;
+-------+---------+-------------------+-------------------+
| Empno | Empname | Date_of_operation | Type_of_operation |
+-------+---------+-------------------+-------------------+
|     1 | Pradip  | 2020-05-06        | Update            |
|     1 | Pradip  | 2020-05-06        | Delete            |
+-------+---------+-------------------+-------------------+
2 rows in set (0.000 sec)


===============================================================================================

6. WAT which display the message ‘Updating’,’Deleting’ or ’Inserting’ when Update, Delete or
   Insert operation is performed on the emp table respectively.

===============================================================================================

MariaDB [test]> DELIMITER //
MariaDB [test]> CREATE TRIGGER emp_insert BEFORE INSERT ON emp FOR EACH ROW
    -> BEGIN
    ->     SIGNAL SQLSTATE '80000'
    ->     SET MESSAGE_TEXT='Inserting An EMP.';
    -> END //
Query OK, 0 rows affected (0.023 sec)

MariaDB [test]>
MariaDB [test]> INSERT INTO emp(empname,position,salary) VALUES('Shubham','CEO_TENCENT',70000) //
ERROR 1644 (80000): Inserting An EMP.
MariaDB [test]>
MariaDB [test]> CREATE TRIGGER emp_update BEFORE UPDATE ON emp  FOR EACH ROW
    -> BEGIN
    ->     SIGNAL SQLSTATE '80001'
    ->     SET MESSAGE_TEXT='Updating An EMP.';
    ->
    -> END //
Query OK, 0 rows affected (0.045 sec)

MariaDB [test]>
MariaDB [test]> UPDATE emp SET salary = '75000' WHERE emp_id = 6 //
ERROR 1644 (80001): Updating An EMP.
MariaDB [test]>
MariaDB [test]> CREATE TRIGGER emp_delete BEFORE DELETE ON emp  FOR EACH ROW
    -> BEGIN
    ->     SIGNAL SQLSTATE '80002'
    ->     SET MESSAGE_TEXT='Deleting An EMP.';
    -> END //
Query OK, 0 rows affected (0.019 sec)

MariaDB [test]> DELETE from emp where empname = 'Lakshya' //
ERROR 1644 (80002): Deleting An EMP.
MariaDB [test]>
MariaDB [test]> DELIMITER ;


===============================================================================================

7. WAT which generate an error if any user try to delete from product_master table on weekends
   
===============================================================================================

MariaDB [test]> DELIMITER //
MariaDB [test]> CREATE TRIGGER emp_day_bd BEFORE DELETE ON product_master
    -> FOR EACH ROW
    -> BEGIN
    -> DECLARE DAY VARCHAR(20);
    ->     SET DAY=DAYNAME(curdate());
    ->     IF DAY='Thursday' THEN
    ->         SIGNAL SQLSTATE '80007'
    ->         SET MESSAGE_TEXT='Deletion is not possible on Thursday.';
    ->     END IF;
    -> END //
Query OK, 0 rows affected (0.291 sec)

MariaDB [test]> select * from product_master;
+------------+--------------+
| product_id | product_name |
+------------+--------------+
|          1 | TV           |
|          2 | LAPTOP       |
|          3 | FRIDGE       |
+------------+--------------+
3 rows in set (0.000 sec)

MariaDB [test]> delete from product_master where product_id='3';
ERROR 1644 (80007): Deletion is not possible on Thursday.



===============================================================================================

8. We have two tables student_mast and stu_log. student_mast have three columns
   STUDENT_ID, NAME, ST_CLASS. stu_log table has two columns user_id and description.

   WAT which inserts the student details in stu_log table as soon as we promote the
   students in student master table( e.g. when a student is promoted from sem 2 to 3,
   auto entry in log table)
   
===============================================================================================

MariaDB [test]> DELIMITER //
MariaDB [test]> CREATE TRIGGER stu_log BEFORE UPDATE ON student_mast
    -> FOR EACH ROW
    -> BEGIN
    ->     DECLARE DES VARCHAR(100) DEFAULT ' ';
    ->     DECLARE SID INT;
    ->     DECLARE SEM_NEW INT;
    ->     DECLARE SEM_OLD INT;
    ->     SET SEM_OLD=OLD.CLASS;
    ->     SET SEM_NEW =SEM_OLD +1;
    ->     SET DES= CONCAT('Student is promoted from semister ',SEM_OLD,' to ',SEM_NEW,DES);
    ->     SET SID=OLD.student_id;
    ->     INSERT INTO stu_log VALUES(SID,DES);
    -> END //
Query OK, 0 rows affected (0.026 sec)

MariaDB [test]> DELIMITER ;


MariaDB [test]> insert into student_mast(name,class) value('pradip',10),
    -> ('Ajinkya',9);
Query OK, 2 rows affected (0.004 sec)
Records: 2  Duplicates: 0  Warnings: 0


MariaDB [test]> SELECT * FROM student_mast;
+------------+---------+-------+
| student_id | name    | class |
+------------+---------+-------+
|          1 | pradip  |    10 |
|          2 | Ajinkya |     9 |
+------------+---------+-------+
2 rows in set (0.000 sec)


MariaDB [test]> UPDATE student_mast SET class=class + 1 WHERE student_id = 1;
Query OK, 1 row affected (0.007 sec)
Rows matched: 1  Changed: 1  Warnings: 0

MariaDB [test]> SELECT * FROM student_mast;
+------------+---------+-------+
| student_id | name    | class |
+------------+---------+-------+
|          1 | pradip  |    11 |
|          2 | Ajinkya |     9 |
+------------+---------+-------+
2 rows in set (0.000 sec)

MariaDB [test]> SELECT * FROM stu_log;
+---------+--------------------------------------------+
| user_id | description                                |
+---------+--------------------------------------------+
|       1 | Student is promoted from semister 10 to 11 |
+---------+--------------------------------------------+
1 row in set (0.000 sec)


===============================================================================================

9. WAT to calculate the Income Tax amount and insert it in emp table. EMP(emp_no,emp_name,
   emp_income, income_tax);

   If emp_income <100000 and >=50000 then incometax = 10%
   If emp_income <200000 and >=100000 then incometax = 15%
   If emp_income <300000 and >=200000 then incometax = 20%
   
===============================================================================================

MariaDB [test]> DELIMITER //
MariaDB [test]> drop trigger income_tax_decide //
Query OK, 0 rows affected (0.000 sec)

MariaDB [test]> CREATE TRIGGER income_tax_decide BEFORE INSERT ON emp3
    -> FOR EACH ROW
    -> BEGIN
    -> DECLARE tax FLOAT;
    ->     IF (NEW.emp_income >= 50000 AND NEW.emp_income < 100000) THEN
    ->         set tax = (NEW.emp_income*10)/100;
    ->         set NEW.income_tax = tax;
    ->     ELSEIF (NEW.emp_income >= 100000 AND NEW.emp_income < 200000) THEN
    ->         set tax = (NEW.emp_income*15)/100;
    ->         set NEW.income_tax = tax;
    ->     ELSEIF (NEW.emp_income >= 200000 AND NEW.emp_income < 300000) THEN
    ->         set tax = (NEW.emp_income*20)/100;
    ->         set NEW.income_tax = tax;
    ->     END IF;
    -> END //
Query OK, 0 rows affected (0.019 sec)

MariaDB [test]> DELIMITER ;
MariaDB [test]>
MariaDB [test]> insert into emp3(emp_name,emp_income,income_tax) values('pradip',80000,0);
Query OK, 1 row affected (0.006 sec)

MariaDB [test]>
MariaDB [test]>
MariaDB [test]> SELECT * FROM EMP3;
+--------+----------+------------+------------+
| emp_no | emp_name | emp_income | income_tax |
+--------+----------+------------+------------+
|      8 | pradip   |      80000 |          0 |
|      9 | pradip   |      80000 |          0 |
|     10 | pradip   |      80000 |          0 |
|     11 | pradip   |      80000 |          0 |
|     12 | pradip   |      15000 |          0 |
|     13 | pradip   |      80000 |       8000 |
+--------+----------+------------+------------+
6 rows in set (0.000 sec)

MariaDB [test]> insert into emp3(emp_name,emp_income,income_tax) values('pradip',80000,0);
Query OK, 1 row affected (0.004 sec)

MariaDB [test]> SELECT * FROM EMP3;
+--------+----------+------------+------------+
| emp_no | emp_name | emp_income | income_tax |
+--------+----------+------------+------------+
|      1 | pradip   |      80000 |       8000 |
+--------+----------+------------+------------+
1 row in set (0.000 sec)


MariaDB [test]> insert into emp3(emp_name,emp_income,income_tax) values('Ajinkya',190000,0);
Query OK, 1 row affected (0.004 sec)

MariaDB [test]> SELECT * FROM EMP3;
+--------+----------+------------+------------+
| emp_no | emp_name | emp_income | income_tax |
+--------+----------+------------+------------+
|      1 | pradip   |      80000 |       8000 |
|      2 | Ajinkya  |     190000 |      28500 |
+--------+----------+------------+------------+
2 rows in set (0.000 sec)